
@using PagedList;
@using PagedList.Mvc;


@model IPagedList<E_Commerce_Site.Models.Inventory>
<br />
<p>
    @Html.ActionLink("Create New Inventory", "Create", null, new { @class = "btn btn-warning" })
</p>

<p>
    @using (Html.BeginForm("Index", "Inventories", FormMethod.Get))
    {
        <b>Search by:</b><br />
        @Html.RadioButton("searchBy", "ProductId")<text>Product Id</text><br />
        @Html.RadioButton("searchBy", "ProductName")<text>Product Name</text><br />


        <div class="col-md-12">
            @Html.TextBox("search")<input type="submit" value="Search" />
        </div>
    }


</p>



<table class="table table-bordered  table-hover table-responsive">
    <tr>
        <th>
            @Html.ActionLink("Inventory Id", "Index", new { sortBy = ViewBag.SortInventoryIdParameter, searchBy = Request.QueryString["searchBy"], search = Request["search"] }, new { style = "color:green" })
        </th>
        <th>
            @Html.ActionLink("Product Id", "Index", new { sortBy = ViewBag.SortProductIdParameter, searchBy = Request.QueryString["searchBy"], search = Request["search"] }, new { style = "color:green" })
        </th>
        <th>
            @Html.ActionLink("Product Name", "Index", new { sortBy = ViewBag.SortProductNameParameter, searchBy = Request.QueryString["searchBy"], search = Request["search"] }, new { style = "color:green" })
        </th>
        <th>
            @Html.ActionLink("Color", "Index", new { sortBy = ViewBag.SortColorParameter, searchBy = Request.QueryString["searchBy"], search = Request["search"] }, new { style = "color:green" })
        </th>
        <th>
            @Html.ActionLink("Size", "Index", new { sortBy = ViewBag.SortSizeParameter, searchBy = Request.QueryString["searchBy"], search = Request["search"] }, new { style = "color:green" })
        </th>
        <th>
            @Html.ActionLink("Quantity", "Index", new { sortBy = ViewBag.SortQuantityParameter, searchBy = Request.QueryString["searchBy"], search = Request["search"] }, new { style = "color:green" })
        </th>



    </tr>


    @if (Model.Count() == 0)
    {
        <tr>
            <td colspan="3"> No rows matched search criteria   </td>
        </tr>
    }

    else
    {
        foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.InventoryId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.ProductId)
                </td>
                <td>
                    @Html.ActionLink(item.Product.ProductName, "Details", "Products", new { id = item.ProductId }, new { @style = "color:blue;" })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Color.ColorName)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.Size.SizeName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.InventoryId }, new { @style = "color:green;" })
                    @Html.ActionLink("Details", "Details", new { id = item.InventoryId }, new { @style = "color:blue;" })
                    @Html.ActionLink("Delete", "Delete", new { id = item.InventoryId }, new { @style = "color:red;" })
                </td>
            </tr>
        }
    }
    </table>
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchBy = Request.QueryString["searchBy"], search = Request.QueryString["Search"], sortBy = Request["sortBy"] }),
    new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = true, DisplayItemSliceAndTotal = true })
